using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using HalconDotNet;
using Interface;

namespace video_src
{
  public class PlugInfoImpl :IPlugInfo {
    public string GetPlugName()
    {
      return WebcamSrc.PLUG_NAME;
    }
    public PlugType GetPlugType()
    {
      return PlugType.PT_SRC;
    }
    public Type GetPropType()
    {
      return typeof(WebcamProperty);
    }

    public string GetUUID()
    {
      return "EB7C4F05-7341-45D1-94EF-2EDAC3F6C8EB";
    }
  }

  public class PlugFactory : IPlugFactory
  {
    internal readonly static IPlugInfo pluginfo_ = new PlugInfoImpl();
    public IPlugInfo GetPlugInfo()
    {
      return pluginfo_;
    }

    public IPlugin NewPlug()
    {
      return new WebcamSrc();
    }

  }

  public class WebcamProperty  :BaseProperty
  {
    private bool saveOnClose = true;
    private string greetingText = "欢迎使用应用程序！";
    private int itemsInMRU = 4;
    private int maxRepeatRate = 10;
    private bool settingsChanged = false;
    private string appVersion = "1.0";

    public bool SaveOnClose
    {
      get
      {
        return saveOnClose;
      }
      set { saveOnClose = value; }
    }
    public string GreetingText
    {
      get { return greetingText; }
      set { greetingText = value; }
    }
    public int MaxRepeatRate
    {
      get { return maxRepeatRate; }
      set { maxRepeatRate = value; }
    }
    public int ItemsInMRUList
    {
      get { return itemsInMRU; }
      set { itemsInMRU = value; }
    }
    public bool SettingsChanged
    {
      get { return settingsChanged; }
      set { settingsChanged = value; }
    }

    [DisplayName("中文名")]
    public string AppVersion
    {
      get { return appVersion; }
      set { appVersion = value; }
    }

    [DisplayName("点")]
    public Point pt { get; set; }
  }


  public class WebcamSrc : ISrcPlug
  {
    public static String PLUG_NAME = "DirectShowVideo";
    WebcamProperty property_ = new WebcamProperty();
    public WebcamSrc()
    {
     // FilterInfoCollection videoDevices;
     // videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);
    }

    RunEvent param_;
    public IPlugInfo GetPlugInfo()
    {
      return PlugFactory.pluginfo_;
    }

    BaseProperty IPlugin.GetProperty()
    {
      return property_;
    }

    public void SetProperty(object prop)
    {
      property_ = prop as WebcamProperty;
    }

    public bool SetRunEvent(RunEvent param)
    {
      param_ = param;
      return true;
    }

    public bool Run()
    {
      if(null == param_)
      {
        return false;
      }
      HObject ho_Image = null;

      HTuple hv_AcqHandle = null;
      // Initialize local and output iconic variables
      HOperatorSet.GenEmptyObj(out ho_Image);
      //Image Acquisition 01: Code generated by Image Acquisition 01
      HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb",
                                    -1, "false", "default", "[1] Microsoft Camera Rear", 0, -1, out hv_AcqHandle);
      HOperatorSet.SetFramegrabberParam(hv_AcqHandle, "grab_timeout", 5000);
      HOperatorSet.GrabImageStart(hv_AcqHandle, -1);
      while (!param_.stop)
      {
        ho_Image.Dispose();
        HOperatorSet.GrabImageAsync(out ho_Image, hv_AcqHandle, -1);
        param_.NotifyLiveData(ho_Image);
        //Image Acquisition 01: Do something
      }
      HOperatorSet.CloseFramegrabber(hv_AcqHandle);
      ho_Image.Dispose();
      return true;
    }

    public Ctx CallProcess(Ctx ctx)
    {
      throw new NotImplementedException();
    }

    public List<ParamDesc> InputParamDesc()
    {
      throw new NotImplementedException();
    }

    public List<ParamDesc> OutputParamDesc()
    {
      throw new NotImplementedException();
    }

   
  }


}
